#!/usr/bin/env python2
# -*- coding: utf-8 -*-
##################################################
# GNU Radio Python Flow Graph
# Title: Hurdle2 Solution Stub Autogenerated
# Generated: Wed Oct 26 21:48:43 2016
##################################################

from gnuradio import blocks
from gnuradio import eng_notation
from gnuradio import gr
from gnuradio.eng_option import eng_option
from gnuradio.filter import firdes
from grc_gnuradio import blks2 as grc_blks2
from optparse import OptionParser

# ADDED BY HAND
import result_submitter



class hurdle2_solution_stub_autogenerated(gr.top_block):

    def __init__(self, hurdle2_IQ_port=9091, hurdle2_result_port=9090, hurdle2_scoring_host='127.0.0.1', num_bins=30, sample_filename='sample_filename.dat'):
        gr.top_block.__init__(self, "Hurdle2 Solution Stub Autogenerated")

        ##################################################
        # Parameters
        ##################################################
        self.hurdle2_IQ_port = hurdle2_IQ_port
        self.hurdle2_result_port = hurdle2_result_port
        self.hurdle2_scoring_host = hurdle2_scoring_host
        self.num_bins = num_bins
        self.sample_filename = sample_filename

        ##################################################
        # Variables
        ##################################################
        self.samp_rate = samp_rate = 3e6
        
        # ADDED BY HAND        
        self.answer = result_submitter.make_prediction(self.sample_filename)

        ##################################################
        # Blocks
        ##################################################
        self.blocks_throttle_0 = blocks.throttle(gr.sizeof_gr_complex*1, samp_rate,True)
        self.blocks_file_sink_0 = blocks.file_sink(gr.sizeof_gr_complex*1, sample_filename, False)
        self.blocks_file_sink_0.set_unbuffered(False)
        self.blks2_tcp_source_0 = grc_blks2.tcp_source(
        	itemsize=gr.sizeof_gr_complex*1,
        	addr=hurdle2_scoring_host,
        	port=hurdle2_IQ_port,
        	server=False,
        )

        ##################################################
        # Connections
        ##################################################
        self.connect((self.blks2_tcp_source_0, 0), (self.blocks_throttle_0, 0))    
        self.connect((self.blocks_throttle_0, 0), (self.blocks_file_sink_0, 0))    

    def get_hurdle2_IQ_port(self):
        return self.hurdle2_IQ_port

    def set_hurdle2_IQ_port(self, hurdle2_IQ_port):
        self.hurdle2_IQ_port = hurdle2_IQ_port

    def get_hurdle2_result_port(self):
        return self.hurdle2_result_port

    def set_hurdle2_result_port(self, hurdle2_result_port):
        self.hurdle2_result_port = hurdle2_result_port

    def get_hurdle2_scoring_host(self):
        return self.hurdle2_scoring_host

    def set_hurdle2_scoring_host(self, hurdle2_scoring_host):
        self.hurdle2_scoring_host = hurdle2_scoring_host

    def get_num_bins(self):
        return self.num_bins

    def set_num_bins(self, num_bins):
        self.num_bins = num_bins

    def get_sample_filename(self):
        return self.sample_filename

    def set_sample_filename(self, sample_filename):
        self.sample_filename = sample_filename
        self.blocks_file_sink_0.open(self.sample_filename)

    def get_samp_rate(self):
        return self.samp_rate

    def set_samp_rate(self, samp_rate):
        self.samp_rate = samp_rate
        self.blocks_throttle_0.set_sample_rate(self.samp_rate)


def argument_parser():
    parser = OptionParser(usage="%prog: [options]", option_class=eng_option)
    parser.add_option(
        "", "--hurdle2-IQ-port", dest="hurdle2_IQ_port", type="intx", default=9091,
        help="Set hurdle2_IQ_port [default=%default]")
    parser.add_option(
        "", "--hurdle2-result-port", dest="hurdle2_result_port", type="intx", default=9090,
        help="Set hurdle2_result_port [default=%default]")
    parser.add_option(
        "", "--hurdle2-scoring-host", dest="hurdle2_scoring_host", type="string", default='127.0.0.1',
        help="Set hurdle2_scoring_host [default=%default]")
    parser.add_option(
        "", "--num-bins", dest="num_bins", type="intx", default=30,
        help="Set num_bins [default=%default]")
    parser.add_option(
        "", "--sample-filename", dest="sample_filename", type="string", default='sample_filename.dat',
        help="Set sample_filename [default=%default]")
    return parser


def main(top_block_cls=hurdle2_solution_stub_autogenerated, options=None):
    if options is None:
        options, _ = argument_parser().parse_args()

    tb = top_block_cls(hurdle2_IQ_port=options.hurdle2_IQ_port, hurdle2_result_port=options.hurdle2_result_port, hurdle2_scoring_host=options.hurdle2_scoring_host, num_bins=options.num_bins, sample_filename=options.sample_filename)
    tb.start()
    tb.wait()

    #ADDED BY HAND
    # If you put code after the final call to the top block's wait(), 
    # you can ensure that those functions will be called one and only one time
    
    # This will execute after you close the GNU Radio plots
    success = result_submitter.submit_my_answer(tb.answer, tb.hurdle2_scoring_host, tb.hurdle2_result_port)

    print("Results submitted successfully? {}".format(success))


if __name__ == '__main__':
    main()
